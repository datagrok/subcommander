#!/bin/sh
# Description: Prints some information about the environment.

#
# subcommander/lib/info - prints information about the environment
#
# Copyright 2014  Michael F. Lamb <http://datagrok.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
#
# License: GPLv3 http://www.gnu.org/licenses/gpl.html
#

set -e

# Many of the discovery and variables within this script is duplicated in
# SC_MAIN proper, but I prefer that to forcing SC_MAIN to needlessly
# export many environment variables.

ctx_envname="`echo $SC_MAIN|tr 'a-z ' 'A-Z_'`_CONTEXT"
eval "exec_path=\${`echo $SC_NAME|tr 'a-z ' 'A-Z_'`_EXEC_PATH:='$0.d'}"
sc_rcfile="$HOME/.${SC_MAIN}rc"
if [ "$SC_CONTEXT" ]; then
	contextfile="$SC_CONTEXT/.$SC_MAIN.context"
fi

fmt <<- EOF
	The following variables (and only these) are added to the environment of
	executed subcommands:

	The name of this subcommander-based tool:

	    SC_MAIN=$SC_MAIN

	    SC_NAME=$SC_NAME

	The current context:

	    SC_CONTEXT=$SC_CONTEXT

	$SC_MAIN will execute the following, in order, before its first subcommand,
	if they exist and are executable. Note that these are *executed*, not
	sourced, and thus may be implemented in any language. To function properly,
	both executables must call or exec() their argument list. It is expected
	that the user may modify these in order to call hook scripts or modify the
	environment.

EOF

echo "    $sc_rcfile"
echo
[ -e "$sc_rcfile" ] && ans='Yes' || ans='No'
echo "               exists: $ans"

[ -x "$sc_rcfile" ] && ans='Yes' || ans='No'
echo "        is executable: $ans"
echo

if [ "$SC_CONTEXT" ]; then
	echo "    $contextfile"
	echo
	[ -e "$contextfile" ] && ans='Yes' || ans='No'
	echo "               exists: $ans"

	[ -x "$contextfile" ] && ans='Yes' || ans='No'
	echo "        is executable: $ans"
	echo
else
	fmt <<- EOF
		Note: there is no current context defined. Or as git would say, "fatal:
		Not a $SC_MAIN workspace (or any of the parent directories):
		.$SC_MAIN.context"
		
	EOF
fi

cat <<- EOF
	Other state information follows:

	\`pwd\`=`pwd`
	\$0=$0

EOF

